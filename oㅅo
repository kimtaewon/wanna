package Main;
import java.awt.*;
import javafx.geometry.*;
import java.awt.geom.Line2D;
import java.util.Scanner;

public class Main{
    public static int N = 0;
    public static Point[] a = new Point[4];

    public static void add(Point p) {
        if (N >= a.length - 1){
            Point[] temp = new Point[2 * N + 1];
            for (int i = 0; i <= N; i++) temp[i] = a[i];
            a = temp;
        }
        a[N++] = p;
        a[N] = a[0];
    }
    public static double area() {
        double sum = 0.0;
        for (int i = 0; i < N; i++) {
            sum = sum + ((float)a[i].x * (float)a[i + 1].y) - ((float)a[i].y * (float)a[i + 1].x);
        }
        return 0.5 * sum;
    }
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int num = input.nextInt();
        int[] x = new int[num];
        int[] y = new int[num];
        double area = 0;
        for(int i = 0; i < num; i++){
            x[i] = input.nextInt();
            y[i] = input.nextInt();
            input.nextLine();
        }

        if(num > 3) {
            for (int i = 0; i < num; i++) {
                add(new Point(x[i], y[i]));
            }

            area = area();
        }
        else if(num <= 2) {
            area = 0.0;
        }
        else if(num == 3){
            Triangle2D tri = new Triangle2D(x[0], y[0], x[1], y[1], x[2], y[2]);
            area = tri.getArea();
        }
        area = Math.round(Math.abs(area) * 100.0) / 100.0;;
        System.out.printf("The total area is %.2f", area);
    }
}

class MyPoint{
    public double x;
    public double y;
    MyPoint(){
        this.x = 0;
        this.y = 0;
    }
    MyPoint(double a, double b){
        this.x = a;
        this.y = b;
    }
    public double getX(){
        return this.x;
    }
    public double getY(){
        return this.y;
    }
}

class Triangle2D{
    MyPoint p1 = new MyPoint();
    MyPoint p2 = new MyPoint();
    MyPoint p3 = new MyPoint();
    Triangle2D(){
        MyPoint p1 = new MyPoint(0, 0);
        MyPoint p2 = new MyPoint(1, 1);
        MyPoint p3 = new MyPoint(2, 5);
    }
    Triangle2D(double a, double b, double c, double d, double e, double f){
        p1 = new MyPoint(a, b);
        p2 = new MyPoint(c, d);
        p3 = new MyPoint(e, f);
    }
    double getArea(){
        return Math.abs((1.0 / 2.0) * ((p1.getX() * p2.getY() + p2.getX() * p3.getY() + p3.getX() * p1.getY()) - (p2.getX() * p1.getY() + p3.getX() * p2.getY() + p1.getX() * p3.getY())));
    }
    double getPerimeter(){
        double peri1 = Math.sqrt(Math.pow((p2.getX() - p1.getX()), 2) + Math.pow((p2.getY() - p1.getY()), 2));
        double peri2 = Math.sqrt(Math.pow((p3.getX() - p2.getX()), 2) + Math.pow((p3.getY() - p2.getY()), 2));
        double peri3 = Math.sqrt(Math.pow((p1.getX() - p3.getX()), 2) + Math.pow((p1.getY() - p3.getY()), 2));
        return peri1 + peri2 + peri3;
    }
    public boolean contains(double a, double b){
        double whole = Math.abs((1.0 / 2.0) * ((p1.getX() * p2.getY() + p2.getX() * p3.getY() + p3.getX() * p1.getY()) - (p2.getX() * p1.getY() + p3.getX() * p2.getY() + p1.getX() * p3.getY())));
        double area1 = Math.abs((1.0 / 2.0) * ((p1.getX() * p2.getY() + p2.getX() * b + a * p1.getY()) - (p2.getX() * p1.getY() + a * p2.getY() + p1.getX() * b)));
        double area2 = Math.abs((1.0 / 2.0) * ((p1.getX() * b + a * p3.getY() + p3.getX() * p1.getY()) - (a * p1.getY() + p3.getX() * b + p1.getX() * p3.getY())));
        double area3 = Math.abs((1.0 / 2.0) * ((a * p2.getY() + p2.getX() * p3.getY() + p3.getX() * b) - (p2.getX() * b + p3.getX() * p2.getY() + a * p3.getY())));
        if(whole == area1 + area2 + area3){
            return true;
        }
        return false;
    }
    public boolean contains(Triangle2D a){
        if(contains(a.p1.getX(), a.p1.getY()) && contains(a.p2.getX(), a.p2.getY()) && contains(a.p3.getX(), a.p3.getY())){
            return true;
        }
        return false;
    }
    public boolean overlaps(Triangle2D a){
        if(!Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p2.getX(), this.p2.getY(), a.p1.getX(), a.p1.getY(), a.p2.getX(),a.p2.getY()) && !Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p2.getX(), this.p2.getY(), a.p1.getX(), a.p1.getY(), a.p3.getX(),a.p3.getY()) && !Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p2.getX(), this.p2.getY(), a.p3.getX(), a.p3.getY(), a.p2.getX(),a.p2.getY())){
            if(!Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p3.getX(), this.p3.getY(), a.p1.getX(), a.p1.getY(), a.p2.getX(),a.p2.getY()) && !Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p3.getX(), this.p3.getY(), a.p1.getX(), a.p1.getY(), a.p3.getX(),a.p3.getY()) && !Line2D.linesIntersect(this.p1.getX(), this.p1.getY(), this.p3.getX(), this.p3.getY(), a.p3.getX(), a.p3.getY(), a.p2.getX(),a.p2.getY())){
                if(!Line2D.linesIntersect(this.p3.getX(), this.p3.getY(), this.p2.getX(), this.p2.getY(), a.p1.getX(), a.p1.getY(), a.p2.getX(),a.p2.getY()) && !Line2D.linesIntersect(this.p3.getX(), this.p3.getY(), this.p2.getX(), this.p2.getY(), a.p1.getX(), a.p1.getY(), a.p3.getX(),a.p3.getY()) && !Line2D.linesIntersect(this.p3.getX(), this.p3.getY(), this.p2.getX(), this.p2.getY(), a.p3.getX(), a.p3.getY(), a.p2.getX(),a.p2.getY())){
                    return false;
                }
            }
        }
        return true;
    }
}
